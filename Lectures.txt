Нулева лекция - Ники

По презентацията показва изискванията за курса, Програмата за курса.  

Руски сайт в който може да се упражняваме по рефакториране на код govnokod....

Форматирането трябва да спазва логическата структура на кода.
Лошо форматирания код ни пречи на разбирането на кода. Важно е кодът лесно да се възприема. Понякога се отива при вече написан код. Има много време, през което четем код, опитваме се да го разберем. Времето на програмистите е скъпо. Качеството на кода е инвестирано време. Правим кода по-лесен за екстендване, поддръжка. 

1. Подобряване на четимостта. Подобряване разбирането на кода. Важно е мястото на скобите.Т.е. Формитаренто да показва /спазва логическата структура на кода. Консистентност. По един и същи начин да се прави. Както сме се разбрали, както сме приели в конкр. фирма. Тогава форматирането е консистентно. 

2. Място на отваряща и затваряща скоба - при C# на едно и също място навътре - 4 интервала. В JS е различно. Зависи на колко символа е настроена табулацията на съответната програма, на която пишем кода. Тези скоби винаги трябва да се слагат { ... }

3. Основните инструменти, които ни помагат за форматиране на кода - табулации, интервали празни редове. СКоби!! Всички те правят хода по-четим. 

Качеството на кода преди пърформанса. Новите редове да разделяме отделните парчета на кода. Между методите също се поставя празен ред. Винаги слагаме скоби {}. 

След всяка отваряща скоба следващото е с 1 табулация навътре. Също след метода се залепя скобата (). 

Разделянето на параметрите със , и интервал. Коментари - и след това няма празен ред. Празния ред е преди коментара. Коментарът е за следващите редове код. 

По какъв начин се подреждат нещата в един клас. Няма най-правилен начин. Ключовата дума е консистентност. Стай копа да минава, но да сме се разбрали за тиимуърка за едни правила и да си ги спазваме. 

В подредбата на един клас: Първо са констаттите; полетата, Конструкторите, Пропертитата, Методите пъблик, прайвит. 
Иначе правилото е първо статичните неща, после динамичните. Всяко нещо е добре коментирано. Обяснява защо се прави следващия код, а не как се прави. Коментарите обясняват причините. 

Оператори, изрази, условни конструкции и цикли - винаги се пишат със скоби, {} интентирането също е важно. Винаги нов ред след затварящата скоба. Повече от 1 табулация е излишна - или 4 символа. Дава добри и лофи примери След for и след if има един интервал преди (.  Също така е важно на 1 ред да има само по един оператор!!! 

Също слага празер ред веднага след затварящата скоба }. Два последователни реда не се слагат. 

Много дългите редове могат да бъдат разделяни на повече от 1 ред. Втори и трети ред - подходящо индентирани. 

За JS преди отварящата скоба на същия ред { да има 1 интервал! 

Друго което трябва да избягваме - подредба едно под друго на променливи от различен тип като с табулации са подравнени самите имена на променливите и знака = - Това е много трудно за поддръжка и макар да изглежда на пръв поглед красиво, не трябва да се прави!!! Такива подредби по колони - трудни са за поддръжка и не трябва да се правят. Модифицирането/ промяната/ на един ред от кода не трябва да повлиява не тярбва да изисква мотифициране на други редове. Когато говорим в контекста на форматирането. 

 Ctrl - K, D - клавишната комбинация на Вижуъл Студио за форматиране на кода. 
 
За VS StyleCop е туула за качествен код. След ; да има нов ред задължително (не празен ред, а само нов). Рънва СтайлКоп с десен бутон на мишката върху сълюшъна. Ако иска да прави настройване - рънва с десен бутон на мишката върху проекта. След като прави някакви промени по кода, го рънва отново с Ctrl+Shift - Y. Прави рефакториране ренейм - една променлива се променя навсякъде както я иска. Имаше отпреди Ctrl-. Enter И промяната на променливата става навсякъде в кода. 

Класовете трябва да имат аксес модифайър - public, interncal, ... Също коментарите - преди тях да има празен ред!






